// Code generated by protoc-gen-go. DO NOT EDIT.
// source: the.proto

package queryDouBanID

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the isbn.
type IsbnRequest struct {
	Isbn                 string   `protobuf:"bytes,1,opt,name=isbn,proto3" json:"isbn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsbnRequest) Reset()         { *m = IsbnRequest{} }
func (m *IsbnRequest) String() string { return proto.CompactTextString(m) }
func (*IsbnRequest) ProtoMessage()    {}
func (*IsbnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9ea86d1ad8f5ba6, []int{0}
}

func (m *IsbnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsbnRequest.Unmarshal(m, b)
}
func (m *IsbnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsbnRequest.Marshal(b, m, deterministic)
}
func (m *IsbnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsbnRequest.Merge(m, src)
}
func (m *IsbnRequest) XXX_Size() int {
	return xxx_messageInfo_IsbnRequest.Size(m)
}
func (m *IsbnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsbnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsbnRequest proto.InternalMessageInfo

func (m *IsbnRequest) GetIsbn() string {
	if m != nil {
		return m.Isbn
	}
	return ""
}

// The response message containing the DouBan url.
type IdUrlReply struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdUrlReply) Reset()         { *m = IdUrlReply{} }
func (m *IdUrlReply) String() string { return proto.CompactTextString(m) }
func (*IdUrlReply) ProtoMessage()    {}
func (*IdUrlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9ea86d1ad8f5ba6, []int{1}
}

func (m *IdUrlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdUrlReply.Unmarshal(m, b)
}
func (m *IdUrlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdUrlReply.Marshal(b, m, deterministic)
}
func (m *IdUrlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdUrlReply.Merge(m, src)
}
func (m *IdUrlReply) XXX_Size() int {
	return xxx_messageInfo_IdUrlReply.Size(m)
}
func (m *IdUrlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IdUrlReply.DiscardUnknown(m)
}

var xxx_messageInfo_IdUrlReply proto.InternalMessageInfo

func (m *IdUrlReply) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*IsbnRequest)(nil), "queryDouBanID.IsbnRequest")
	proto.RegisterType((*IdUrlReply)(nil), "queryDouBanID.IdUrlReply")
}

func init() { proto.RegisterFile("the.proto", fileDescriptor_d9ea86d1ad8f5ba6) }

var fileDescriptor_d9ea86d1ad8f5ba6 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc9, 0x48, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x2c, 0x4d, 0x2d, 0xaa, 0x74, 0xc9, 0x2f, 0x75,
	0x4a, 0xcc, 0xf3, 0x74, 0x51, 0x52, 0xe4, 0xe2, 0xf6, 0x2c, 0x4e, 0xca, 0x0b, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x2c, 0x4e, 0xca, 0x93, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xe4, 0xb8, 0xb8, 0x3c, 0x53, 0x42, 0x8b, 0x72, 0x82, 0x52, 0x0b,
	0x72, 0x2a, 0x85, 0x04, 0xb8, 0x98, 0x4b, 0x8b, 0x72, 0xa0, 0x0a, 0x40, 0x4c, 0x23, 0x6f, 0x2e,
	0xf6, 0x40, 0x90, 0x99, 0x9e, 0x2e, 0x42, 0x0e, 0x5c, 0xac, 0x60, 0xa6, 0x90, 0x94, 0x1e, 0x8a,
	0x35, 0x7a, 0x48, 0x76, 0x48, 0x49, 0xa2, 0xcb, 0xc1, 0x0d, 0x57, 0x62, 0x48, 0x62, 0x03, 0xbb,
	0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x5c, 0xed, 0xf3, 0xb2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryIDClient is the client API for QueryID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryIDClient interface {
	// Sends a query
	Query(ctx context.Context, in *IsbnRequest, opts ...grpc.CallOption) (*IdUrlReply, error)
}

type queryIDClient struct {
	cc *grpc.ClientConn
}

func NewQueryIDClient(cc *grpc.ClientConn) QueryIDClient {
	return &queryIDClient{cc}
}

func (c *queryIDClient) Query(ctx context.Context, in *IsbnRequest, opts ...grpc.CallOption) (*IdUrlReply, error) {
	out := new(IdUrlReply)
	err := c.cc.Invoke(ctx, "/queryDouBanID.QueryID/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryIDServer is the server API for QueryID service.
type QueryIDServer interface {
	// Sends a query
	Query(context.Context, *IsbnRequest) (*IdUrlReply, error)
}

// UnimplementedQueryIDServer can be embedded to have forward compatible implementations.
type UnimplementedQueryIDServer struct {
}

func (*UnimplementedQueryIDServer) Query(ctx context.Context, req *IsbnRequest) (*IdUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterQueryIDServer(s *grpc.Server, srv QueryIDServer) {
	s.RegisterService(&_QueryID_serviceDesc, srv)
}

func _QueryID_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsbnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryIDServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queryDouBanID.QueryID/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryIDServer).Query(ctx, req.(*IsbnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "queryDouBanID.QueryID",
	HandlerType: (*QueryIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _QueryID_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "the.proto",
}
